<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Phenmod Zhu's Blog]]></title>
  <link href="http://phenmod.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://phenmod.github.io/"/>
  <updated>2015-11-18T14:58:46+08:00</updated>
  <id>http://phenmod.github.io/</id>
  <author>
    <name><![CDATA[朱兴灿]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 ClangFormat 插件格式化 Objective-C 代码]]></title>
    <link href="http://phenmod.github.io/blog/2015/11/17/use-clangformat-to-format-objective-c-code/"/>
    <updated>2015-11-17T20:26:17+08:00</updated>
    <id>http://phenmod.github.io/blog/2015/11/17/use-clangformat-to-format-objective-c-code</id>
    <content type="html"><![CDATA[<p>多人开发的工程中，每人负责一部分，代码风格各异。如果没有统一的约定，在阅读和维护其他人的代码时，会有各种不适。一些简单的排版工作，比如空格有几个、括号是否换行等等，也会不必要地浪费一些精力。于是不少公司会使用一些工具对代码进行自动格式化，比如 Dropbox、Parse。</p>

<p>在 iOS 工程中，我们使用 <a href="http://clang.llvm.org/docs/ClangFormat.html">ClangFormat</a> 工具来格式化代码，Xcode 有方便的插件可用。插件地址：<a href="https://github.com/travisjeffery/ClangFormat-Xcode">https://github.com/travisjeffery/ClangFormat-Xcode</a>。</p>

<h2>安装</h2>

<ul>
<li>安装 clang-format</li>
</ul>


<pre><code>brew install clang-format
</code></pre>

<ul>
<li><p>安装 Xcode 插件 <a href="https://github.com/travisjeffery/ClangFormat-Xcode">ClangFormat-Xcode</a>。可通过 <a href="https://github.com/supermarin/Alcatraz">Alcatraz</a>或者直接下载源代码编译运行，然后重启 Xcode 。</p></li>
<li><p>下载本人使用的<a href="https://github.com/Phenmod/Phenmod.github.io/blob/master/assets/.clang-format">格式配置文件</a>，文件名为 <code>.clang-format</code>，把它放到 <code>/Users/yourname/</code> 下，你的所有工程都会使用本配置文件。也可单独放到某工程文件夹里，仅限本工程使用。</p></li>
</ul>


<p>或者自己使用 clang-format 导出一份配置文件再自己修改。</p>

<pre><code>clang-format -style=WebKit -dump-config &gt; .clang-format
</code></pre>

<blockquote><p>注意，文件名最前面有个点，改名后会变为隐藏文件。如果你的 Finder 不能显示隐藏文件，可运行下面两条命令</p>

<pre><code>defaults write com.apple.finder AppleShowAllFiles -bool true
killall Finder
</code></pre></blockquote>

<ul>
<li>勾选上 <code>Xcode -&gt; Edit -&gt; Clang Format -&gt; File</code>，该插件就会使用我们放到用户文件夹的配置文件对源码进行格式化了。</li>
</ul>


<h2>使用方式</h2>

<ul>
<li>可以手动点选 <code>Xcode -&gt; Edit -&gt; Clang Format -&gt; Format File in Focus</code> 对当前选中的文件进行格式化。也可以选择其它两个选项对当前选中的文本或多个文件进行格式化。</li>
<li>可以选中 <code>Xcode -&gt; Edit -&gt; Clang Format -&gt; Enable Format on Save</code>，使之变为 <code>Disable Format on Save</code>，这样在每次 <code>cmd + s</code> 保存文件时，都会自动格式化文件了。</li>
<li>可以给 Xcode 配置系统快捷键。比如我们可以配置 <code>ctr + i</code> 作为对当前选中文件进行格式化的快捷键。步骤如下：

<ul>
<li>打开<code>系统偏好设置 -&gt; 键盘 -&gt; 快捷键 -&gt; 应用程序快捷键</code>，并点击 <code>+</code>。</li>
<li>设置应用程序为 <code>Xcode</code>，菜单标题为 <code>Format File in Focus</code>，快捷键里按下 <code>ctr + i</code>。当然，你也可以使用为其它命令设置快捷键。</li>
</ul>
</li>
</ul>


<p>每个人在提交代码之前，必须格式化代码。
用了这个之后，基本上就不用开发者做排版的事情了，哗啦啦写完代码，一键格式化，人生舒爽了很多。</p>

<h2>格式配置文件</h2>

<p>该插件默认了几种风格可供选用，但都不太符合我们想要的形式，于是自己定义了一个格式配置文件<a href="https://github.com/Phenmod/Phenmod.github.io/blob/master/assets/.clang-format">.format</a></p>

<p>这个是<a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html">ClangFormat各配置项字段的详细说明</a>，还有个<a href="http://clangformat.com/">用实例解释各字段的可交互网站</a>。</p>

<p>这个是<a href="https://github.com/ParsePlatform/xctoolchain/blob/master/.clang-format">Parse的配置文件</a>，可做参考对比。</p>

<p>我们的这个配置还有很多不足的地方，比如长字符串会因为每行字符数限制被截断成两个字符串，并且每格式化一次，就再多截一段，直至截到某个阶段才不再变化。造成一个好好的字符串，变成了好几个只包含了一个或几个字符的字符串。</p>

<h2>关于空行</h2>

<p>配置文件里我们现在允许最多连续两行空行，正在考虑只允许一行。</p>

<p>确实有分段视觉需求的，使用pragma mark进行分割，如下：</p>

<pre><code>// =================================================================================================
#pragma mark - &lt;#代码分块注释#&gt;
// =================================================================================================
</code></pre>

<p>用它定义个code snippet，来个快捷键(我的是pm)，省心啊。</p>

<h2>关于每行字符限制：</h2>

<p>如果你把上面的pragma段拷贝到xcode，会发现上面那一串等号会终止在第100列。没错，我们现在每行字符数限制就是100。</p>

<p>其实我很想定义到120，但是在某些同学的macbook air的小屏幕上不太够显示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS新人入门文档]]></title>
    <link href="http://phenmod.github.io/blog/2015/11/17/to-ios-fresh-man/"/>
    <updated>2015-11-17T19:35:21+08:00</updated>
    <id>http://phenmod.github.io/blog/2015/11/17/to-ios-fresh-man</id>
    <content type="html"><![CDATA[<h2>软件推荐</h2>

<p>参见：Mac下推荐的软件.md</p>

<h2>版本控制系统：Git</h2>

<p>参见：使用Git.md</p>

<h3>分支管理方案：git-flow</h3>

<p>参见：使用git-flow.md</p>

<h2>iOS技术</h2>

<h3>开发工具</h3>

<ul>
<li>sourceTree或者git命令行的使用。</li>
<li>CocoaPods的使用。
参见：<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">用CocoaPods做iOS程序的依赖管理</a></li>
<li>Xcode及Instruments的使用。编译、调试、调优等手段。</li>
</ul>


<h3>开发技术</h3>

<ul>
<li>研究ARC的相关技术及使用。熟悉weak，strong等关键字的使用。</li>
<li>研究block的使用，理解内存的循环引用。</li>
<li>熟悉StoryBoard及Xib的使用。</li>
<li>全面认识UIView及UIViewController的各属性功能类的函数功能。</li>
<li>透彻理解MVC。了解常用设计模式。</li>
<li>了解UIView动画及Core Animation的主要功能。</li>
<li>研究线程安全，了解系统类中哪些是线程安全的，了解如何写一个线程安全类。</li>
</ul>

]]></content>
  </entry>
  
</feed>
