<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | Phenmod Zhu's Blog]]></title>
  <link href="http://phenmod.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://phenmod.com/"/>
  <updated>2016-02-04T15:59:17+08:00</updated>
  <id>http://phenmod.com/</id>
  <author>
    <name><![CDATA[朱兴灿]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brew 的工作细节]]></title>
    <link href="http://phenmod.com/blog/2016/01/20/brew-internal/"/>
    <updated>2016-01-20T21:17:23+08:00</updated>
    <id>http://phenmod.com/blog/2016/01/20/brew-internal</id>
    <content type="html"><![CDATA[<p>本文将大略讲一下 brew 的工作细节。对普通的使用者来说，只要看明白使用文档就好，了不了解这些内容并不重要。有些内容（用斜体标出的部分）我也不太确定是否正确，还待后续修改。</p>

<h3>brew 本身的文件位置</h3>

<p>通过 <code>which brew</code> 命令，可以发现 brew 命令的可执行文件的路径为 /usr/local/bin/brew，它是个 shell 脚本。用文本编辑软件打开，可以发现它实际上是读取系统使用的 ruby 的路径，来执行 /usr/local/Library/brew.rb。</p>

<p>brew 软件本身的各个文件 <em>全部</em> 在 /usr/local/Library 目录下，可以在它的三个子目录 bin/、Library/、share/ 下找到安装后的 brew 文件。比如，/usr/local/bin/brew 就是 brew 的可执行文件。具体每个brew的子命令都是一个个的 ruby 脚本，比如，<code>brew search</code> 就是 /usr/local/Library/Homebrew/cmd/search.rb。</p>

<p>每个使用brew安装的软件都有一个对应的ruby脚本，我们称为 Formula，<code>brew install &lt;package_name&gt;</code>安装命令其实就是读取这个脚本里的配置，下载源码，然后运行配置里写好的安装命令。这些脚本放在 /usr/local/Library/Formula 下，使用 <code>brew update</code> 从github拉取最新版本的 brew 时，会在命令行运行结束后看到提示，哪些软件有版本更新，新增了哪些软件。</p>

<h3>brew 安装软件的细节</h3>

<p>软件下载下来之后，缓存在 /Library/Caches/Homebrew 目录中，你会在这个目录下发现一堆你下载过的软件包。如果你已安装某软件，然后用 <code>brew reinstall &lt;package_name&gt;</code> 重新安装该版本，就不需要重新下载了，它会直接使用已下载的软件进行安装。</p>

<p>brew 大多是直接下载源码然后编译安装，安装命令如 <code>./configure &amp;&amp; make install</code>。并且，在安装本软件之前，会先安装脚本里指明的本项目的依赖库。</p>

<p>软件安装的目录是 /usr/local/Cellar/&lt;package_name>/&lt;version>/，比如 /usr/local/Cellar/autojump/22.2.4/。源码编译完成后，生成的文件都会放在这里，如果是直接下载的可执行文件，也会直接放在这里。每个版本的软件都会放在对应版本名称的文件夹下。一般的软件可能会包含可执行文件、供其它库使用的头文件、运行库、文档等文件或目录，为了方便升级管理，，brew 会把这些文件或目录分别软链接到 /usr/local/bin/、/usr/local/include/、/usr/local/lib/、/usr/local/share/ 等目录下。</p>

<p>如果你用 <code>brew upgrade &lt;package_name&gt;</code> 更新过几次该软件，你所有安装过的版本都会在 /usr/local/Cellar/&lt;package_name>/ 目录下找到。每次升级时，brew都是先把可执行文件等都编译到当前版本目录下，撤销之前版本的软链接，然后再将新版本软链接到 /usr/local 的各子文件夹下。这样，我们就会使用到最新版本了。</p>

<p>你也可以使用 <code>brew swith</code> 来切换使用软件的某具体版本。比如，<code>brew swith autojump 22.1.4</code> 。</p>

<p>时间久了，你的安装文件会越来越多，这时候可以用 <code>brew cleanup</code> 清理掉不想用的旧版本，这样会会节省出来大量硬盘空间。如果你不想直接删掉，可以使用 <code>brew cleanup -n</code> 命令，它相当于预演一下，告诉你真正运行 <code>brew cleanup</code> 时会干些什么，而不会真正执行。检查完毕确定可以删除后，你再 <code>brew cleanup</code> 就安全多了。brew 的很多命令都支持 <code>-n</code> 参数，也就是 <code>--dry-run</code> 参数，这些就需要你自己去翻文档了。</p>

<p>brew 还提供了很多其他命令，有需要的话自己 <code>man brew</code> 查看吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Brew 安装管理软件]]></title>
    <link href="http://phenmod.com/blog/2016/01/09/use-brew/"/>
    <updated>2016-01-09T17:11:11+08:00</updated>
    <id>http://phenmod.com/blog/2016/01/09/use-brew</id>
    <content type="html"><![CDATA[<p>看看 brew 官网的<a href="http://brew.sh/">介绍</a>，</p>

<blockquote><p><code>The missing package manager for OS X</code></p></blockquote>

<p>Mac OS 没有提供软件包管理器，不能像在 linux 上能使用 apt-get 那样，从软件仓库中搜索、安装、升级软件。就有大神 <a href="https://github.com/mxcl">Max Howell</a> 写了个 brew。</p>

<p>brew 项目在 github 上的地址是 <a href="https://github.com/Homebrew/homebrew">https://github.com/Homebrew/homebrew</a>，brew 本身及每个软件的版本更新维护都是在这里通过提 pr 的方式进行。</p>

<h2>安装</h2>

<pre><code>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre>

<h2>常用命令</h2>

<pre><code>brew search &lt;package_name&gt;      # 搜索
brew install &lt;package_name&gt;     # 安装一个软件
brew update                     # 从服务器上拉取，并更新本地 brew 的包目录
brew upgrade &lt;package_name&gt;     # 更新软件
brew outdated                   # 查看你的软件中哪些有新版本可用
brew cleanup                    # 清理老版本。使用 `-n` 参数，不会真正执行，只是打印出真正运行时会做什么。
brew list --versions            # 查看你安装过的包列表（包括版本号）
brew link &lt;package_name&gt;        # 将软件的当前最新版本软链到`/usr/local`目录下
brew unlink &lt;package_name&gt;      # 将软件在`/usr/local`目录下的软链接删除。
brew info                       # 显示软件的信息 
brew deps                       # 显示包依赖
</code></pre>

<h2>brew 的子软件包</h2>

<p>我们常用的其实是 brew 的主包，里面有比较常用的软件，比如 <code>erlang</code>、<code>cloc</code>、<code>cmake</code>、<code>tree</code>等。但还有些比如科学计算相关的软件，并不是很常用，数量又很多，就会根据类型单独分到一个子软件包里。在安装 brew 的时候，并不会将这些软件的 <code>Formula</code> 下载到本地，要想使用的话，应该先安装该子软件包。</p>

<p>比如 opencv 在 science 子软件包里，安装的时候需要先使用命令 <code>brew tap homebrew/science</code> 将 <code>science</code> 子软件包下载下来，然后再 <code>brew install opencv</code>。或者你也可以直接指明软件所在的子包，通过 <code>brew install homebrew/science/opencv</code> 命令来安装，这个命令会先 <code>tap</code> 该子软件包，再安装软件。<code>homebrw/science</code> 项目的 github 地址是：<a href="https://github.com/Homebrew/homebrew-science">https://github.com/Homebrew/homebrew-science</a>，tap下来的 science 的 <code>Formula</code> 放在 <code>/usr/local/Library/Taps/homebrew/homebrew-science</code> 目录下。</p>

<p>你可以在 github 上看到 brew 的其它子软件包：<a href="https://github.com/Homebrew">https://github.com/Homebrew</a>，比如 <code>homebrew-games</code>、<code>homebrew-emacs</code> 等。</p>

<h2>使用 brew cask</h2>

<p>brew 会对依赖的软件也进行安装，并且配置环境，再复杂的安装也就是一条命令而已，这对需要安装各种运行环境的程序员来说，简直是天大的福音。但 brew 是通过下载源码的方式进行安装的，alfred、dropbox、chrome 等软件能使用 brew 直接安装软件么？答案是可以的，有工具 brew cask。</p>

<p>官网地址：<a href="http://caskroom.io/">caskroom.io</a></p>

<p>github地址：<a href="https://github.com/caskroom/homebrew-cask">brew cask</a></p>

<p>它扩展了 brew，以优雅、简单、快速地安装和管理 OS X 图形界面程序为己任，目前已收集了 2941 个常用软件，并有 433 个维护人员。</p>

<pre><code>brew tap caskroom/cask              # 添加 github 上的 caskroom/cask 库
brew install brew-cask              # 安装 brew-cask
brew cask install google-chrome     # 安装 chrome 浏览器
brew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup # 更新
brew search &lt;package_name&gt;          # 搜索想要的软件。
</code></pre>

<p>brew cask装的软件会放到 <code>/opt/homebrew-cask/Caskroom</code> 下面，然后软链接到 <code>~/Applications</code>。 跟我们手动安装软件的默认位置 <code>/Applications</code> 不一样。</p>

<p>一些我安装的软件：alfred appcleaner cheatsheet chrome dropbox haskell-platform launchrocket onepassword totalfinder</p>

<h3>通过 brew cask 安装 Finder 的文件预览插件</h3>

<p>我们可以在 Finder 里选中某个文件后，敲一下空格键，Finder 会弹出一个这个文件的预览窗口，这会让我们直接看到这个文件的内容，而不用打开关闭该文件，在是个非常实用的功能。如果你的 Finder 像我一样始终是以<code>分栏</code>的方式显示的话，在选中文件后，Finder 右侧会直接显示改文件内容，那就更方便了。</p>

<p>但是，支持预览的文件格式只有系统默认的一些如图片、pdf等，还有很多格式的软件，如 json、xml、markdown、html等，我们是不能通过 Finder 的文件预览来查看的。</p>

<p>所以，强烈推荐装一些<a href="https://github.com/sindresorhus/quick-look-plugins">插件</a></p>

<pre><code>brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql webp-quicklook suspicious-package
</code></pre>

<h3>其它</h3>

<p>如果你经常使用 Alfred 启动程序，那么你会想 Alfred 可以搜索 brew cask 安装的程序，实现这些仅需运行：</p>

<pre><code>brew cask alfred link
</code></pre>

<p>此外，你还可以通过 brew cask 安装 <a href="https://github.com/jimbojsb/launchrocket">launchrocket</a>，来管理通过 brew 安装的 service。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 下推荐的软件]]></title>
    <link href="http://phenmod.com/blog/2015/11/17/recommend-some-mac-os-software/"/>
    <updated>2015-11-17T20:05:03+08:00</updated>
    <id>http://phenmod.com/blog/2015/11/17/recommend-some-mac-os-software</id>
    <content type="html"><![CDATA[<p>传说中，Mac 电脑是程序员专用的“飞机中的战斗机”，baidu 一下 “mac 软件推荐”，你会得到很多优秀的工具。下面是我常用的几款，具体安装及使用方式不细说。</p>

<ol>
<li>终端工具 <a href="http://www.iterm2.com/#/section/home">iterm</a>，官网下载安装。preferences -> Keys -> HotKey，设置一个系统热键。（我的是cmd+shift+m）。</li>
<li>终极 shell <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> 。安装命令：<code>curl -L http://install.ohmyz.sh | sh</code>，具体使用参考<a href="http://zhuanlan.zhihu.com/mactalk/19556676">池建强的文章</a></li>
<li>SourceTree ：git的图形化操作工具。</li>
<li>brew ：Mac下安装常用软件的利器，几乎所有的软件我都是用它安装管理的。参见<a href="/blog/2016/01/09/use-brew/">用 Brew 安装管理软件</a></li>
<li>Alfred ：自定义各种快捷操作，神器。</li>
<li>Moom ：快速设置窗口的位置及大小，全键盘流的福音。</li>
<li>Parallel Desktop ：想安装个虚拟机就用它吧，无缝连接系统，牛叉无比。</li>
<li>RescueTime ：关注你每天时间的使用，提高工作效率。</li>
<li>Charles ：抓包工具，可给真机做代理，可模拟网络不好的情况。</li>
<li>Sublime Text ：你永远都不会知道这个看起来像个简单文本编辑器的编辑器有多牛逼。<a href="https://sublime.wbond.net/">一堆堆的插件</a>。支持 Dash 集成。</li>
<li>Mou ：写 markdown 文档，编辑时同步预览比较方便。但是最新版在编写大文件时会比较卡。我现在用 Sublime 装上<code>Markdown Extended</code>、<code>Markdown Preview</code>、<code>MarkdownEditing</code>、<code>MarkdownTOC</code>这几个插件，编辑预览什么的，也很方便。</li>
<li>iTools ：不越狱查看真机 app 里的个各种文件。</li>
<li>XtraFinder ：增强 Finder 功能。</li>
<li><a href="http://www.grandtotal.biz/CheatSheet/">cheatSheat</a>：长按 command 查看当前程序的所有快捷键，好用到爆。</li>
<li><a href="http://www.sequelpro.com/download">Sequel Pro</a>：连接远端、本地 mysql，方便易用。</li>
<li><a href="http://www.freemacsoft.net/appcleaner/">AppCleaner</a>：应用程序卸载工具。</li>
</ol>


<p>另外的几个相关推荐帖子：</p>

<ul>
<li><a href="http://www.cocoachina.com/mac/20141112/10198.html">Mac 开发配置手册</a> 本文翻译自 <a href="https://github.com/sb2nov/mac-setup">mac-setup</a>，原文不断更新，且有很多其他内容。</li>
<li><a href="https://github.com/hzlzh/Best-App">Best-App</a> 收集 &amp; 推荐优秀的 Apps/硬件/技巧/周边等</li>
<li><a href="http://www.xialeizhou.com/?p=71">高效 MacBook 工作环境配置</a></li>
<li><a href="https://support.apple.com/zh-cn/HT201236">MacBook 快捷键</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
